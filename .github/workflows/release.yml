name: Build and Sign macOS App

on:
  push:
    tags:
    - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-14

    steps:
    - name: Select Xcode 15.3
      run: |
        sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Import Apple distribution certificate
      env:
        DEVELOPER_ID_CERT_BASE64: ${{ secrets.DEVELOPER_ID_CERT_BASE64 }}
        DEVELOPER_ID_CERT_PASSWORD: ${{ secrets.DEVELOPER_ID_CERT_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        echo "$DEVELOPER_ID_CERT_BASE64" | base64 --decode > certificate.p12
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security import certificate.p12 -k build.keychain -P "$DEVELOPER_ID_CERT_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

    - name: Update Xcode project version
      id: project-version
      run: |
        VERSION=$(echo "${GITHUB_REF#refs/tags/v}")
        xcrun agvtool new-version -all "$VERSION"
        xcrun agvtool new-marketing-version "$VERSION"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"

    - name: Build app
      run: |
        xcodebuild -project NowPlayingMenuBar.xcodeproj -configuration Release

    - name: Sign app
      env:
        CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
      run: |
        : # Every file in the Sparkle framework version we use needs to be signed individually.
        find build/Release/NowPlayingMenuBar.app/Contents/Frameworks/Sparkle.framework/Versions/B -type f -exec codesign -f -s "$CODESIGN_IDENTITY" {} --options runtime \;
        codesign -f -s "$CODESIGN_IDENTITY" build/Release/NowPlayingMenuBar.app --options runtime

    - name: Notarize app
      uses: nick-fields/retry@v3.0.0
      env:
        APP_DEVELOPER_ID: ${{ secrets.APP_DEVELOPER_ID }}
        APP_DEVELOPER_TEAM_ID: ${{ secrets.APP_DEVELOPER_TEAM_ID }}
        NOTARYTOOL_PASSWORD: ${{ secrets.NOTARYTOOL_PASSWORD }}
      with:
        timeout_minutes: 2
        max_attempts: 3
        command: |
          ditto -c -k --keepParent build/Release/NowPlayingMenuBar.app NowPlayingMenuBar-Unnotarized.zip
          NOTARY_OUTPUT=$(xcrun notarytool submit NowPlayingMenuBar-Unnotarized.zip --apple-id "$APP_DEVELOPER_ID" --password "$NOTARYTOOL_PASSWORD" --team-id "$APP_DEVELOPER_TEAM_ID" --wait | tee /dev/fd/2)
          if [[ "$NOTARY_OUTPUT" == *"Invalid"* ]]; then
            exit 1
          fi

    - name: Staple notarization ticket
      run: |
        xcrun stapler staple build/Release/NowPlayingMenuBar.app

    - name: Archive app
      id: archive
      run: |
        ZIP_FILE="NowPlayingMenuBar-${{ steps.project-version.outputs.version }}.zip"
        ditto -c -k --keepParent build/Release/NowPlayingMenuBar.app "$ZIP_FILE"
        echo "zip-file=$ZIP_FILE" >> "$GITHUB_OUTPUT"

    - name: Sign app update with Sparkle
      id: sign-app-update
      env:
        SPARKLE_ED_PRIVATE_KEY_BASE64: ${{ secrets.SPARKLE_ED_PRIVATE_KEY_BASE64 }}
      run: |
        SPARKLE_ED_PRIVATE_KEY=$(echo "$SPARKLE_ED_PRIVATE_KEY_BASE64" | base64 --decode)
        SIGN_UPDATE_OUTPUT=$(echo $SPARKLE_ED_PRIVATE_KEY | .sparkle/bin/sign_update "${{ steps.archive.outputs.zip-file }}" --ed-key-file - | tee /dev/fd/2)
        echo "signature=$SIGN_UPDATE_OUTPUT" >> "$GITHUB_OUTPUT"

    - name: Checkout appcast branch
      uses: actions/checkout@v4
      with:
        ref: appcast
        path: appcast-branch

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ steps.archive.outputs.zip-file }}

    - name: Update Sparkle appcast
      env:
        SPARKLE_ED_PRIVATE_KEY_BASE64: ${{ secrets.SPARKLE_ED_PRIVATE_KEY_BASE64 }}
      run: |
        SPARKLE_ED_PRIVATE_KEY=$(echo "$SPARKLE_ED_PRIVATE_KEY_BASE64" | base64 --decode)
        mkdir -p appcast-branch/releases
        cp "${{ steps.archive.outputs.zip-file }}" "appcast-branch/releases/${{ steps.archive.outputs.zip-file }}"
        echo $SPARKLE_ED_PRIVATE_KEY | .sparkle/bin/generate_appcast appcast-branch/releases --download-url-prefix="https://github.com/$GITHUB_REPOSITORY/releases/download/v${{ steps.project-version.outputs.version }}/" --ed-key-file -
        cd appcast-branch
        git add .
        git commit -m "Update appcast for v${{ steps.project-version.outputs.version }}"
        git push
